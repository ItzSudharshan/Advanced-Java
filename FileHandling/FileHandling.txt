What Is File Handling?
File handling refers to the way programs interact with files. It includes operations like creating, opening, reading, writing, and closing files. Files make it possible to save data permanently so you can access it whenever you need.
----------------------
Byte-Based vs. Character-Based File Handling
When working with files, there are two types of data streams:
Byte-Based Streams
Character-Based Streams
-----------------------
Interviewer: Can you explain the difference between byte-based and character-based file handling?
Ideal Answer:
Byte-based file handling deals with raw bytes of data, suitable for binary files like images and audio. Character-based file handling deals with text data, interpreting bytes as characters based on encoding like UTF-8. Byte-based streams use classes like InputStream and OutputStream, while character-based streams use classes like Reader and Writer.
------------------------
Real-World Analogy: Imagine I/O Streams as water pipes:

Input Stream: Water flowing into your home (data coming into your program).
Output Stream: Water flowing out of your home (data going out from your program).
Key Points
Byte Streams: Used for binary data (images, audio).
Character Streams: Used for text data (.txt files).
Buffered Streams: Improve efficiency by buffering operations.
Data Streams: Handle primitive data types (int, double).
--------------------------
Java I/O Streams are essential for reading and writing data. The java.io package provides all necessary classes. Use byte streams for binary data, character streams for text, and buffered streams for efficiency.
-------------------------
1. Byte Streams
Used For: Reading and writing binary data (like images, audio files).

Key Classes:
InputStream: The abstract class for reading byte streams.
FileInputStream: Reads bytes from a file.
OutputStream: The abstract class for writing byte streams.
FileOutputStream: Writes bytes to a file.

2. Character Streams
Used For: Reading and writing text data (like .txt files).

Key Classes:
Reader: The abstract class for reading character streams.
FileReader: Reads characters from a file.
Writer: The abstract class for writing character streams.
FileWriter: Writes characters to a file.


3. Buffered Streams
Used For: Improving efficiency by buffering input and output operations.

Key Classes:
BufferedInputStream and BufferedOutputStream: For byte streams.
BufferedReader and BufferedWriter: For character streams


4. Data Streams
Used For: Reading and writing primitive data types (int, double, etc.).

Key Classes:
DataInputStream
DataOutputStream
-------------------------
In Java, byte-based streams are used for reading and writing data as bytes. They are ideal for handling binary files, like images, audio, and video, because they let you work with the data at a very detailed level.
-------------------------
BufferedReader - Efficient Line-by-Line Reading
The BufferedReader class is designed for reading text data efficiently. It reads data from a file line by line rather than byte by byte, making it ideal for handling large text files.
----------------------
How Does BufferedWriter Work?

Buffering: Stores multiple lines in memory before writing, making file writing faster.

write() and newLine(): Use write() to write strings and newLine() to add line breaks.
---------------------

learn
completed
Buffered Character Streams
Byte-based streams work well for binary data, but for character data, character-based streams with buffering make reading and writing text files more efficient. Buffered character streams reduce the number of I/O operations by storing large chunks of data in memory, enabling faster and smoother processing.

BufferedReader and BufferedWriter
BufferedReader - Efficient Line-by-Line Reading
The BufferedReader class is designed for reading text data efficiently. It reads data from a file line by line rather than byte by byte, making it ideal for handling large text files.

How Does BufferedReader Work?

Buffering: It stores a buffer of characters in memory, reducing disk access by reading chunks of data at once.

Line-by-Line Reading: The readLine() method reads text until a newline character, making it faster for reading files line by line.

Program Example:
Let’s read the content of input.txt efficiently with BufferedReader:

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class ReadFileExample {
    public static void main(String[] args) {
        try (BufferedReader reader = new BufferedReader(new FileReader("input.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
        } catch (IOException e) {
            System.out.println("An error occurred while reading the file.");
            e.printStackTrace();
        }
    }
}
Explanation:

BufferedReader: Reads lines of text with the readLine() method.

Try-With-Resources: Ensures BufferedReader is closed after use, managing resources efficiently.

BufferedWriter - Writing Multiple Lines to a File
BufferedWriter is used to write text data to files efficiently, reducing the number of actual write operations by storing data in a buffer until it’s ready to be written to disk.

How Does BufferedWriter Work?

Buffering: Stores multiple lines in memory before writing, making file writing faster.

write() and newLine(): Use write() to write strings and newLine() to add line breaks.

BufferedWriter: Writes strings and automatically buffers data for efficiency.

write() and newLine(): Writes text and creates line breaks in output.txt.

Flushing and Closing Streams
When using buffered streams, it's crucial to manage resources and data flow properly. The flush() method is essential to ensure that any remaining data in the buffer is written to the file before closing.

flush(): Forces any remaining data in the buffer to be written to the file.

close(): Releases the system resources and flushes any remaining data.
---------------------------