What is Hibernate?
Hibernate is an ORM (Object Relational Mapping) framework for Java. Let's break that down:

Object: Objects are data structures like a user or an order in your Java code.

Relational: Databases store data in tables, which are like spreadsheets with rows and columns.

Mapping: ORM is about linking or 'mapping' those Java objects (like a user) to the database tables where the data is stored.
-----------------------
Why Use Hibernate?
Using Hibernate offers several key benefits to simplify database interactions for developers:

1. Simplified Database Interactions
Instead of writing long, complex SQL queries, you can use Java objects to perform all sorts of database operations. Want to add a new user? Just create a new Java object and ask Hibernate to save it. Need to update a record? Change the Java object and ask Hibernate to update it for you. Itâ€™s like asking a friend to do all the heavy lifting while you relax.

2. No More SQL Headaches
Hibernate avoids common SQL issues, so you don't need to worry about specific syntax or different flavors of SQL. Hibernate uses HQL (Hibernate Query Language), which looks and feels like writing in Java, making it more comfortable to work with.

3. Database Independence
Hibernate makes your application less dependent on a specific database. Imagine you built your app using MySQL, but your client wants to switch to PostgreSQL. If you were using raw SQL, you'd have to rewrite a lot of code. With Hibernate, switching databases is much smoother since Hibernate handles those differences for you. Itâ€™s like having a car that can run on different types of fuel without needing an engine change!

4. Automatic Table Creation
Hibernate can automatically create the tables you need in the database, based on the Java objects youâ€™ve defined. You donâ€™t need to worry about writing SQL scripts to create tablesâ€”itâ€™s all done for you. Itâ€™s like ordering a pizza and getting it delivered straight to your door, without having to go through the trouble of cooking yourself.

5. Lazy Loading for Performance
Hibernate uses a concept called lazy loading, which means it only loads data when you need it. For example, it loads user details only when you request them. This helps your application run faster by not fetching unnecessary information. Think of it like a buffetâ€”you only take what you want when you want it, rather than having everything dumped on your plate at once.
-------------------
Configuration cfg = new Configuration();
Creates a Hibernate Configuration object.

Itâ€™s used to load settings like database URL, driver, username, password, and entity class mappings.

Think of it as Hibernateâ€™s setup/initialization.

ðŸ”¹ cfg.configure();
Loads configuration from hibernate.cfg.xml (by default).

This file tells Hibernate how to connect to the DB and which classes to map.

ðŸ”¹ SessionFactory factory = cfg.buildSessionFactory();
Creates a SessionFactory using the config.

It's like a factory that produces DB sessions (connections).

It's a heavy object â€” create it once and reuse it.

ðŸ”¹ Session sess = factory.openSession();
Opens a Session, which is basically a connection between your Java code and the database via Hibernate.

You use it to interact with the DB (save, read, update, delete).

ðŸ”¹ Transaction tx = sess.beginTransaction();
Begins a transaction â€” a group of SQL operations that either all succeed or all fail (commit or rollback).

Required when doing changes like save, update, delete.
------------------------
Components of Hibernate 
In Hibernate, there are a few main components that work together to manage data.

SessionFactory:
Think of the SessionFactory as the main counter in the library. It's the point where all the activities begin and end. This counter is set up once when the library opens and stays in place for the whole day.
Similarly, in Hibernate, SessionFactory is created once and manages the overall setup for connecting to the database.

Session:
A Session is like a librarian who helps the visitors. Whenever someone wants to borrow or return a book, the librarian assists them. In Hibernate, each Session represents a connection between your Java app and the database.
Whenever your app needs to interact with the database (like fetching data or updating records), a Session handles that interaction.

Transaction:
A Transaction can be thought of as a promise between you and the librarian. Imagine you want to borrow three books. Either you get all three books, or you get noneâ€”this way, the library stays organized and avoids confusion.
In Hibernate, a Transaction ensures that a series of actions (like saving or updating data) are either all completed successfully or not at all. This helps keep your data consistent and prevents errors.

Query:
A Query is like asking the librarian a question. For example, you might ask, "Do you have books by a particular author?" or "Can I borrow these two books?" In Hibernate, Query is used to get information from the database or update it.
Queries in Hibernate are written in HQL (Hibernate Query Language), which is similar to SQL but works with Java objects.

Configuration:
Configuration is like setting up the library before it opens. It involves arranging the books, setting up the rules, and preparing everything so the library can run smoothly.
In Hibernate, Configuration is used to set up all the details, such as how to connect to the database and what settings to use.
-------------------------------